//
//  TrainWithMusicViewController.m
//  eHealthCare
//
//  Created by John shi on 2018/7/23.
//  Copyright © 2018年 Jon Shi. All rights reserved.
//
#import <AVFoundation/AVFoundation.h>

#import "TrainWithMusicViewController.h"

#import "MusicTrainChoseTopicView.h"
#import "BaseWeatherSceneView.h"
#import "CADisplayLineImageView.h"

#import "MusicTrainViewModel.h"

#import "MusicTrainModel.h"
#import "DouTrack.h"

#import "WeatherSceneManager.h"

#import <DOUAudioStreamer.h>

@interface TrainWithMusicViewController () <MusicTrainChoseTopicDelegate>
{
    CADisplayLineImageView *displayImageView;
    
    ///早安晚安动画视图
    BaseWeatherSceneView *sceneView;

}
@property (nonatomic, strong) UIImageView *backView;
@property (nonatomic, strong) UILabel *titleLabel;///标题
@property (nonatomic, strong) UIButton *playOrPauseButton;

@property (nonatomic, strong) MusicTrainChoseTopicView *topicView;
@property (nonatomic, strong) MusicTrainModel *model;

/******************动画******************/
///秋高气爽的动画背景图
@property (nonatomic, strong) UIImageView *progressBGImageView;
///海上初日的背景图
@property (nonatomic, strong) UIImageView *cloudImageView;
///夜晚的动画
@property (nonatomic, strong) UIImageView *nightImageView;

/******************流媒体******************/
@property (nonatomic, strong) DOUAudioStreamer *streamer;

@property (nonatomic, strong) DouTrack *audioTrack;

@end

/**DOUAudioStreamer使用*/
static void *kStatusKVOKey = &kStatusKVOKey;
static void *kDurationKVOKey = &kDurationKVOKey;
static void *kBufferingRatioKVOKey = &kBufferingRatioKVOKey;

@implementation TrainWithMusicViewController

#pragma mark life cycle

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    //给早安和晚安添加动画特效
    if (self.trainType == TrainTypeMorning || self.trainType == TrainTypeEvening) {
        
        [self loadCADisplayLineImageView:self.model.BgImgUrl];
    }
    
    [self createUI];
    
    [self initPlayer];
    
    MusicTrainModel *model = [MusicTrainModel mj_objectWithKeyValues:self.dataDic];
    
    self.model = model;
    
    //上传用户行为
    [self updateUserBehaviorWithNetWorking];
    
    //加载数据
    [self loadData];
    
}

- (void)viewDidDisappear:(BOOL)animated
{
    [super viewDidDisappear:animated];
    
    [self _cancelStreamer];
}

#pragma mark UI
- (void)createUI
{
    UIImageView *backView = [[UIImageView alloc]initWithImage:[UIImage imageNamed:@"MusicTrain_background_quiet"]];
    
    backView.userInteractionEnabled = YES;
    
    [self.view addSubview:backView];
    self.backView = backView;
    [backView mas_makeConstraints:^(MASConstraintMaker *make) {
        
        make.top.left.bottom.right.mas_equalTo(0);
    }];
    
    UILabel *titleLab = [[UILabel alloc] init];
    titleLab.font = Kfont(20);
    titleLab.textColor = [UIColor colorWithHexString:@"#ffffff"];
    titleLab.textAlignment = NSTextAlignmentCenter;
    titleLab.text = self.myTitle;
    [backView addSubview:titleLab];
    [titleLab mas_makeConstraints:^(MASConstraintMaker *make) {
        
        make.centerX.mas_equalTo(backView.mas_centerX);
        make.top.mas_equalTo(PublicY - 42);
        make.height.mas_equalTo(40);
    }];
    self.titleLabel = titleLab;
    
    //返回按钮
    UIButton *backButton = [UIButton buttonWithType:UIButtonTypeCustom];
    
    [backButton setImage:[UIImage imageNamed:@"icon_back_white"] forState:UIControlStateNormal];
    [backButton setImage:[UIImage imageNamed:@"icon_back_white"] forState:UIControlStateHighlighted];
    [backButton addTarget:self action:@selector(clickBack:) forControlEvents:UIControlEventTouchUpInside];
    
    [backView addSubview:backButton];
    [backButton mas_makeConstraints:^(MASConstraintMaker *make) {
        
        make.left.mas_equalTo(12);
        make.top.mas_equalTo(PublicY - 42);
        make.width.height.mas_equalTo(40);
    }];
    
    //选择主题背景
    UIButton *choseTopicButton = [UIButton buttonWithType:UIButtonTypeCustom];
    
    [choseTopicButton setImage:[UIImage imageNamed:@"topicChoseImage"] forState:UIControlStateNormal];
    [choseTopicButton addTarget:self action:@selector(choseTopicAction) forControlEvents:UIControlEventTouchUpInside];
    
    [backView addSubview:choseTopicButton];
    [choseTopicButton mas_makeConstraints:^(MASConstraintMaker *make) {
        
        make.top.mas_equalTo(PublicY - 42);
        make.right.mas_equalTo(- 12);
        make.size.mas_equalTo(CGSizeMake(KWidth(40), KWidth(40)));
    }];
    
    //播放暂停按钮
    UIButton *playOrPauseButton = [UIButton buttonWithType:UIButtonTypeCustom];
    
    [playOrPauseButton setImage:[UIImage imageNamed:@"pause"] forState:UIControlStateNormal];
    [playOrPauseButton addTarget:self action:@selector(playMusicOrPauseAction:) forControlEvents:UIControlEventTouchUpInside];
    
    [backView addSubview:playOrPauseButton];
    self.playOrPauseButton = playOrPauseButton;
    
    [playOrPauseButton mas_makeConstraints:^(MASConstraintMaker *make) {
        
        make.bottom.mas_equalTo( - KHeight(60));
        make.centerX.mas_equalTo(self.view.mas_centerX);
        make.size.mas_equalTo(CGSizeMake(KWidth(65), KWidth(65)));
    }];
    
    
}

#pragma mark Action

- (void)loadData
{
    self.model = [MusicTrainModel mj_objectWithKeyValues:self.dataDic];
    
    dispatch_async(dispatch_get_main_queue(), ^{
        
        if (self.trainType == TrainTypeMorning || self.trainType == TrainTypeEvening) {
            self.backView.image = [UIImage imageNamed:@""];
            
        }else{
            [self.backView sd_setImageWithURL:[NSURL URLWithString:self.model.BgImgUrl] placeholderImage:[UIImage imageNamed:@"MusicTrain_background_quiet"]];
        }

        
        self.titleLabel.text = self.model.EaseName;
        
        [self startMusicPlayerWithURL:[NSURL URLWithString:@"http://img.xiekang.net/Upload/UploadMusic/20171121233033mouxiang.mp3"]];
        
        //给早安和晚安添加动画特效
        if (self.trainType == TrainTypeMorning || self.trainType == TrainTypeEvening) {
            
            [self addAnimationAtMorningOrEverning];
        }
        
    });
    
}

- (void)choseTopicAction
{
    if (!self.topicView) {
        MusicTrainChoseTopicView *topicView = [[MusicTrainChoseTopicView alloc]init];
        
        [self.view addSubview:topicView];
        topicView.delegate = self;
        self.topicView = topicView;
        [topicView mas_makeConstraints:^(MASConstraintMaker *make) {

            make.left.mas_equalTo(0);
            make.top.mas_equalTo(KScreenHeight);
            make.size.mas_equalTo(CGSizeMake(KScreenWidth, KHeight(420)));
        }];
    }else
    {
        self.topicView.hidden = NO;
    }
    self.topicView.listArray = self.TopicDataArray;
    
    [self showTopicViewWithAnimation];
}

//播放或暂停
- (void)playMusicOrPauseAction:(UIButton *)sender
{
    sender.selected = !sender.selected;
    if (sender.selected == YES) {
        
        [sender setImage:[UIImage imageNamed:@"play"] forState:UIControlStateNormal];
        [self.streamer pause];
    }else
    {
        [sender setImage:[UIImage imageNamed:@"pause"] forState:UIControlStateNormal];
        [self.streamer play];
    }
}

- (void)clickBack:(id)sender
{
    [self.navigationController popViewControllerAnimated:YES];
}

//播放音频的方法
- (void)startMusicPlayerWithURL:(NSURL *)musicUrl
{
    [self removeObserversForDouAudioStreamer];
    
    if (!self.audioTrack) {
        self.audioTrack = [[DouTrack alloc]init];
    }
    
    //准备播放
    self.audioTrack.audioFileURL = musicUrl;
    
    self.streamer = nil;
    self.streamer = [DOUAudioStreamer streamerWithAudioFile:self.audioTrack];
    
    [self.streamer play];
    
    [self addObserversForDouAudioStreamer];
    
    //设置后台播放
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        [self setBackgroundPlay];
    });
}

//后台播放模式
- (void)setBackgroundPlay
{
    [[AVAudioSession sharedInstance] setActive:YES error:nil];
    [[AVAudioSession sharedInstance] setCategory:AVAudioSessionCategoryPlayback error:nil];
}
#pragma mark Pop框架 动画
- (void)showTopicViewWithAnimation
{
    POPSpringAnimation *springAnimation = [POPSpringAnimation animationWithPropertyNamed:kPOPLayerPosition];
    
    springAnimation.fromValue = [NSValue valueWithCGRect:CGRectMake(KScreenWidth / 2, 2 * KScreenHeight - KHeight(420), KScreenWidth, KHeight(420))];
    
    springAnimation.toValue = [NSValue valueWithCGRect:CGRectMake(KScreenWidth / 2, KHeight(460), KScreenWidth, KHeight(420))];
    
    springAnimation.springBounciness = 8.0;
    
    springAnimation.springSpeed = 1.0;
    
    [self.topicView pop_addAnimation:springAnimation forKey:@"showTopicView"];
}

- (void)dismissTopicViewWithAnimation
{
    POPSpringAnimation *springAnimation = [POPSpringAnimation animationWithPropertyNamed:kPOPLayerPosition];
    
    springAnimation.fromValue = [NSValue valueWithCGRect:CGRectMake(KScreenWidth / 2, KHeight(460),KScreenWidth, KHeight(420))];
    
    springAnimation.toValue = [NSValue valueWithCGRect:CGRectMake(KScreenWidth / 2,2 * KScreenHeight - KHeight(420), KScreenWidth, KHeight(420))];
    
    springAnimation.springBounciness = 8.0;
    
    springAnimation.springSpeed = 1.0;
    
    [self.topicView pop_addAnimation:springAnimation forKey:@"hidenTopicView"];
}

#pragma mark NetWorking
//上传用户行为
- (void)updateUserBehaviorWithNetWorking
{
    NSInteger behaviorType = 0;
    if (self.trainType == TrainTypeMorning)
    {
        behaviorType = 3;
        
    }else if (self.trainType == TrainTypeEvening)
    {
        behaviorType = 4;
    }else
    {
        behaviorType = 5;
    }
    NSDictionary *dic = @{@"Token":[UserInfoTool getLoginInfo].Token,
                          @"MemberID":@([UserInfoTool getLoginInfo].MemberID),
                          @"MemName":[UserInfoTool getLoginInfo].Name,
                          @"Mobile":[UserInfoTool getLoginInfo].Mobile,
                          @"BehaviorType":@(behaviorType),
                          @"EaseID":@(self.model.EaseID)};
    
    [MusicTrainViewModel updateUseBehaviorWithParams:dic FinishedBlock:^(ResponseObject *response) {
        
        if (response.code == CodeTypeSucceed ) {
            
            NSLog(@"上传用户行为成功");
            
        }else{
            
            NSLog(@"上传用户行为失败");
        }
    }];
}

#pragma mark Lazy load
- (DOUAudioStreamer *)streamer{
    
    if (!_streamer) {
        _streamer = [DOUAudioStreamer streamerWithAudioFile:self.audioTrack];
    }
    return _streamer;
}


#pragma mark MusicTrainChoseTopic delegate
- (void)choseTopic:(NSInteger)indexTopic
{
    self.dataDic = [self.TopicDataArray objectAtIndex:indexTopic];
    
    [self loadData];
    [self dismissTopicViewWithAnimation];
}

#pragma mark 早安和晚安的动画特效
- (void)addAnimationAtMorningOrEverning
{
    [displayImageView sd_setImageWithURL:[NSURL URLWithString:self.model.BgImgUrl] placeholderImage:[UIImage imageNamed:@"MusicTrain_background_quiet"]];
    
    if (sceneView) {
        [sceneView removeFromSuperview];
    }
    if (self.progressBGImageView ) {
        [self.progressBGImageView removeFromSuperview];
        
    }
    if (self.cloudImageView) {
        [self.cloudImageView removeFromSuperview];
    }
  
    if (self.nightImageView) {
        [self.nightImageView removeFromSuperview];
    }
    
    if ([self.model.EaseName isEqualToString:@"雪花飞舞"]||[self.model.EaseName isEqualToString:@"冬雪早晨"]) {
        
        sceneView = [[WeatherSceneManager sharedSceneManager] showWeatherSceneWithFrame:CGRectMake(0, 0, KScreenWidth , KScreenHeight) weatherType:HeavySnowScene imgName:@"snow"];
        [displayImageView addSubview:sceneView];
    }
    if ([self.model.EaseName isEqualToString:@"夜晚清凉"]) {
        
        self.progressBGImageView = [[WeatherSceneManager sharedSceneManager] showWeatherWithFrame:CGRectMake(0, 0, KScreenWidth , KScreenHeight) weatherType:300 imgName:@""];
        [self.view addSubview:_progressBGImageView];
    }
    if ([self.model.EaseName isEqualToString:@"秋天的雨"]) {
        
        sceneView = [[WeatherSceneManager sharedSceneManager] showWeatherSceneWithFrame:CGRectMake(0, 0, KScreenWidth , KScreenHeight) weatherType:HeavyRainScene imgName:@"rain"];
        [displayImageView addSubview:sceneView];
    }
    if ([self.model.EaseName isEqualToString:@"秋高气爽"]) {
        
        self.progressBGImageView = [[WeatherSceneManager sharedSceneManager] showWeatherWithFrame:CGRectMake(0, 0, KScreenWidth , KScreenHeight) weatherType:100 imgName:@""];
        [self.view addSubview:_progressBGImageView];
        
        
    }
    if ([self.model.EaseName isEqualToString:@"森林清晨"]) {
        self.progressBGImageView = [[WeatherSceneManager sharedSceneManager] showWeatherWithFrame:CGRectMake(0, 0, KScreenWidth , KScreenHeight) weatherType:301 imgName:@""];
        [self.view addSubview:_progressBGImageView];
        
        
    }
    if ([self.model.EaseName isEqualToString:@"海边漫步"]) {
        self.nightImageView = [[WeatherSceneManager sharedSceneManager] showWeatherWithFrame:CGRectMake(KWidth(174), KHeight(1.5), 208.5 , 200) weatherType:111 imgName:@"night_moon"];
        
        [displayImageView addSubview:_nightImageView];
    }
    if ([self.model.EaseName isEqualToString:@"海上日出"]) {
        
        self.cloudImageView = [[WeatherSceneManager sharedSceneManager] showWeatherWithFrame:CGRectMake( - KWidth(104), KHeight(80), 289.5 * 0.9 , 54 * 0.9) weatherType:222 imgName:@"cloudFloat"];
        [displayImageView addSubview:_cloudImageView];
    }
}

-(void)loadCADisplayLineImageView:(NSString *)imageName
{
    displayImageView = [[CADisplayLineImageView alloc] initWithFrame:CGRectMake(0, 0, KScreenWidth,KScreenHeight)];
    [self.view addSubview:displayImageView];
    
    [displayImageView sd_setImageWithURL:[NSURL URLWithString:imageName] placeholderImage:[UIImage imageNamed:@"MusicTrain_background_quiet"]];
}

#pragma mark 豆瓣开源的流媒体框架 DouAudioSteamer

///KOV
- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context{
    
    if (context == kStatusKVOKey) {
        
        [self performSelector:@selector(_updateStatus)
         
                    onThread:[NSThread mainThread]
         
                  withObject:nil
         
               waitUntilDone:NO];
        
    }else if (context == kDurationKVOKey) {
        
//        [self performSelector:@selector(_timerAction:)
//
//                    onThread:[NSThread mainThread]
//
//                  withObject:nil
//
//               waitUntilDone:NO];
        
    }else if (context == kBufferingRatioKVOKey) {
        
    }else{
    
        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];
        
    }
    
}

///播放状态
- (void)_updateStatus{
    
    switch ([_streamer status]) {
            
        case DOUAudioStreamerPlaying:
        {
            [_playOrPauseButton setImage:[UIImage imageNamed:@"pause"] forState:UIControlStateNormal];
        }
            
            break;
            
        case DOUAudioStreamerPaused:
        {
            [_playOrPauseButton setImage:[UIImage imageNamed:@"play"] forState:UIControlStateNormal];
        }
            
            break;
            
        case DOUAudioStreamerIdle:
            
            break;
            
        case DOUAudioStreamerFinished:
        {
            ///播放完成,继续播放吧，暂时先这样
//            [self startMusicPlayerWithURL:[NSURL URLWithString:self.model.MusicUrl]];
            [self.streamer setCurrentTime:0];

        }
            break;
            
        case DOUAudioStreamerBuffering:
            
            break;
            
        case DOUAudioStreamerError:
            
            break;
    }
    
}

///添加观察者
- (void)addObserversForDouAudioStreamer
{
    [self.streamer addObserver:self forKeyPath:@"status"options:NSKeyValueObservingOptionNew context:kStatusKVOKey];
    
    [self.streamer addObserver:self forKeyPath:@"duration"options:NSKeyValueObservingOptionNew context:kDurationKVOKey];
    
    [self.streamer addObserver:self forKeyPath:@"bufferingRatio"options:NSKeyValueObservingOptionNew context:kBufferingRatioKVOKey];
}

///移除观察者
- (void)removeObserversForDouAudioStreamer
{
    [self.streamer removeObserver:self forKeyPath:@"status" context:kStatusKVOKey];
    
    [self.streamer removeObserver:self forKeyPath:@"duration" context:kDurationKVOKey];
    
    [self.streamer removeObserver:self forKeyPath:@"bufferingRatio" context:kBufferingRatioKVOKey];
}

/// 播放器销毁
- (void)_cancelStreamer{
    
    if (_streamer != nil) {
        
        [_streamer pause];
        
        [_streamer removeObserver:self forKeyPath:@"status"];
        
        [_streamer removeObserver:self forKeyPath:@"duration"];
        
        [_streamer removeObserver:self forKeyPath:@"bufferingRatio"];
        
        _streamer = nil;
        
    }
    
}

#pragma mark 音乐播放器
//音乐播放器
-(void)initPlayer
{
    _audioTrack = [[DouTrack alloc] init];
    AVAudioSession *session = [AVAudioSession sharedInstance];
    [session setActive:YES error:nil];
    [session setCategory:AVAudioSessionCategoryPlayback error:nil];
    //让app支持接受远程控制事件
    [[UIApplication sharedApplication] beginReceivingRemoteControlEvents];
    
    //添加通知，拔出耳机后暂停播放
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(routeChange:) name:AVAudioSessionRouteChangeNotification object:nil];
    // 监听音频打断事件
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(audioSessionWasInterrupted:) name:AVAudioSessionInterruptionNotification object:session];
}


// 监听音频打断事件
- (void)audioSessionWasInterrupted:(NSNotification *)notification
{
    //播放的音乐被打断时，停止音乐播放
    if (AVAudioSessionInterruptionTypeBegan == [notification.userInfo[AVAudioSessionInterruptionTypeKey] intValue])
    {
        
        [self.playOrPauseButton setImage:[UIImage imageNamed:@"play"] forState:UIControlStateNormal];
        [self.streamer pause];
        
    }
    else if (AVAudioSessionInterruptionTypeEnded == [notification.userInfo[AVAudioSessionInterruptionTypeKey] intValue])
    {
        
    }
}

// 拔出耳机后暂停播放
-(void)routeChange:(NSNotification *)notification{
    
    NSDictionary *dic=notification.userInfo;
    int changeReason= [dic[AVAudioSessionRouteChangeReasonKey] intValue];
    //等于AVAudioSessionRouteChangeReasonOldDeviceUnavailable表示旧输出不可用
    
    if (changeReason==AVAudioSessionRouteChangeReasonOldDeviceUnavailable) {
        AVAudioSessionRouteDescription *routeDescription=dic[AVAudioSessionRouteChangePreviousRouteKey];
        AVAudioSessionPortDescription *portDescription= [routeDescription.outputs firstObject];
        
        //原设备为耳机则暂停
        if ([portDescription.portType isEqualToString:@"Headphones"]) {
            
            [self.playOrPauseButton setImage:[UIImage imageNamed:@"play"] forState:UIControlStateNormal];
            [self.streamer pause];
        }
    }
}

/// 播放器销毁
- (void)dealloc{
    
    if (_streamer !=nil) {

        [_streamer pause];
        [_streamer removeObserver:self forKeyPath:@"status" context:kStatusKVOKey];
        [_streamer removeObserver:self forKeyPath:@"duration" context:kDurationKVOKey];
        [_streamer removeObserver:self forKeyPath:@"bufferingRatio" context:kBufferingRatioKVOKey];
        
        _streamer =nil;
    }

}

- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event
{
    self.topicView.hidden = YES;
    
    [self dismissTopicViewWithAnimation];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

@end
