//
//  BaiduMap_SportViewController.m
//  eHealthCare
//
//  Created by John shi on 2018/7/10.
//  Copyright © 2018年 Jon Shi. All rights reserved.
//

#import "BaiduMap_SportViewController.h"
#import "SportMapHeaderView.h"
#import <BaiduMapAPI_Map/BMKMapComponent.h>
#import <BaiduMapAPI_Utils/BMKUtilsComponent.h>
#import <BaiduMapAPI_Location/BMKLocationComponent.h>
#import <BaiduTraceSDK/BaiduTraceSDK.h>
#import <CoreLocation/CoreLocation.h>
#import <MapKit/MapKit.h>
#import <dispatch/object.h>
#import "SportMessageView.h"
#import "SportViewModel.h"
@interface BaiduMap_SportViewController () <BMKMapViewDelegate,BMKLocationServiceDelegate,BTKTrackDelegate,SportMessageDelegate,BTKTrackDelegate,BTKEntityDelegate,BMKLocationServiceDelegate,BaiduMapTrackManagerDelegate>
///地图
@property (nonatomic, strong) BMKMapView *mapView;
///显示运动信息的视图
@property (nonatomic,strong) SportMapHeaderView *sportView;

///记录上一次的位置
@property (nonatomic, strong) CLLocation *preLocation;

///位置数组
@property (nonatomic, strong) NSMutableArray *locationArrayM;

///轨迹线
@property (nonatomic, strong) BMKPolyline *polyLine;

///起点大头针
@property (nonatomic, strong) BMKPointAnnotation *startPoint;
///终点大头针
@property (nonatomic, strong) BMKPointAnnotation *endPoint;

@property(nonatomic,strong)BMKUserLocation *userLocation;

@end
#define removeObjectsLen 20
@implementation BaiduMap_SportViewController
#pragma mark - RCLocationManagerDelegate
//位置变化的时候调用
-(void)locationManager:(BaiduMapTrackManager *)manager didUpdatedLocations:(NSArray<CLLocation *> *)locations {
    BMKUserLocation *userLocation = manager.userLocation;
    [self.mapView setCenterCoordinate:userLocation.location.coordinate animated:YES];
    [self.mapView updateLocationData:userLocation];
    [self drawWalkPolyline:locations];
     NSLog(@"-----------%@",locations);
    
    if (!_startPoint) {
        _startPoint = [[BMKPointAnnotation alloc] init];
        [self.mapView addAnnotation:_startPoint];
    }
    _startPoint.title = @"q";
    _startPoint.coordinate = userLocation.location.coordinate;
    [self.mapView selectAnnotation:_startPoint animated:YES];
    
}
-(void)locationManager:(BaiduMapTrackManager *)manager didChangeLocationsState:(BOOL)running {
    if(running) {
        [self.locationManager startTimer];
        UIApplication *app = [UIApplication sharedApplication];
        //接收当前的UIApplication[单例]发送的通知，然后处理selector
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(continueTimer) name:UIApplicationWillEnterForegroundNotification object:app];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(stopTime) name:UIApplicationDidEnterBackgroundNotification object:app];
        
    }else {
        
    }
}
-(void)locationManagerTime:(NSInteger)timerNumber;
{
    NSLog(@"-----------%zi",timerNumber);
    self.sportView.timeLab.text = [NSString stringWithFormat:@"%.2ld:%.2ld",timerNumber/60,timerNumber%60];
    
}
-(void)stopTime {
    //关闭定时器
    [self.locationManager.timer setFireDate:[NSDate distantFuture]];
}
-(void)continueTimer {
    if(self.locationManager.running) {
        [self.locationManager.timer setFireDate:[NSDate distantPast]];
        self.sportView.timeLab.text = [NSString stringWithFormat:@"%.2ld:%.2ld",self.locationManager.timerNumber/60,self.locationManager.timerNumber%60];
    }
}
-(void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    NSRange range = NSMakeRange(0, removeObjectsLen);
    [self.locationManager.locations removeObjectsInRange:range];
}
-(void)dealloc {
    NSLog(@"map view controller dealloc");
}
- (NSMutableArray *)locationArrayM
{
    if (_locationArrayM == nil) {
        _locationArrayM = [NSMutableArray array];
    }
    
    return _locationArrayM;
}
#pragma mark life cycle
- (void)viewDidLoad {
    [super viewDidLoad];
    [self createUI];
   
}

- (void)viewWillAppear:(BOOL)animated
{
    [self clean];
    [_mapView viewWillAppear];
    
    _mapView.delegate = self;
    BMKUserLocation *userLocation = self.locationManager.userLocation;
    self.mapView.centerCoordinate = userLocation.location.coordinate;
    [self.mapView updateLocationData:userLocation];
  
    if(self.locationManager.running) {
        [self.locationManager.timer setFireDate:[NSDate distantPast]];
        self.sportView.timeLab.text = [NSString stringWithFormat:@"%.2ld:%.2ld",self.locationManager.timerNumber/60,self.locationManager.timerNumber%60];
    }
}

- (void)viewWillDisappear:(BOOL)animated
{
    [_mapView viewWillDisappear];
    _mapView.delegate = nil;
    self.locationManager.delegate = nil;
    self.navigationController.delegate = nil;
}

#pragma mark UI
- (void)createUI
{
    [self.view addSubview:self.mapView];
    self.locationManager.delegate = self;
    //开始定位[在RunningDetailViewController中已经开启了，这里不会再开启,因为有逻辑判断]
    [self.locationManager startUpdatingLocation];
    SportMapHeaderView *sportView = [[[NSBundle mainBundle] loadNibNamed:@"SportMapHeaderView" owner:self options:nil] firstObject];
    [self.view addSubview:sportView];
    self.sportView = sportView;
    
    [sportView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.height.mas_equalTo(KHeight(123));
        make.top.mas_equalTo(0);
        make.left.right.mas_equalTo(0);
        
    }];
     self.sportView.timeLab.text = [NSString stringWithFormat:@"%.2ld:%.2ld",self.locationManager.timerNumber/60,self.locationManager.timerNumber%60];
    UIButton *backButton = [UIButton buttonWithType:UIButtonTypeCustom];
    
    [backButton setImage:[UIImage imageNamed:@"btn_close"] forState:UIControlStateNormal];
    [backButton addTarget:self action:@selector(backToUpView) forControlEvents:UIControlEventTouchUpInside];
    
    [self.view addSubview:backButton];
    [backButton mas_makeConstraints:^(MASConstraintMaker *make) {
        
        make.bottom.mas_equalTo(-KHeight(25));
        make.right.mas_equalTo(-KWidth(25));
        make.size.mas_equalTo(CGSizeMake(KWidth(55), KWidth(55)));
        
    }];
    
    
    if(self.locationManager.running) {
        [self.locationManager.timer setFireDate:[NSDate distantPast]];
        self.sportView.timeLab.text = [NSString stringWithFormat:@"%.2ld:%.2ld",self.locationManager.timerNumber/60,self.locationManager.timerNumber%60];
    }
}
#pragma mark Action
- (void)backToUpView
{
    [self dismissViewControllerAnimated:YES completion:nil];
}
/**
 *  绘制步行轨迹路线
 */
- (void)drawWalkPolyline
{
    //轨迹点
    NSUInteger count = self.locationArrayM.count;
    
    // 手动分配存储空间，结构体：地理坐标点，用直角地理坐标表示 X：横坐标 Y：纵坐标
    BMKMapPoint *tempPoints = new BMKMapPoint[count];
    
    [self.locationArrayM enumerateObjectsUsingBlock:^(CLLocation *location, NSUInteger idx, BOOL *stop) {
        
        BMKMapPoint locationPoint = BMKMapPointForCoordinate(location.coordinate);
        tempPoints[idx] = locationPoint;
        NSLog(@"idx = %lu,tempPoints X = %f Y = %f",(unsigned long)idx,tempPoints[idx].x,tempPoints[idx].y);

        // 放置起点旗帜
        if (0 == idx && TrailStart == self.locationManager.trail && self.startPoint == nil) {
            self.startPoint = [self creatPointWithLocaiton:location title:@"起点"];
        }
    }];
    
    //移除原有的绘图
    if (self.polyLine) {
        [self.mapView removeOverlay:self.polyLine];
    }
    
    // 通过points构建BMKPolyline
    self.polyLine = [BMKPolyline polylineWithPoints:tempPoints count:count];
    
    //添加路线,绘图
    if (self.polyLine) {
        [self.mapView addOverlay:self.polyLine];
    }
    
    // 清空 tempPoints 内存
    delete []tempPoints;
    
    [self mapViewFitPolyLine:self.polyLine];
}

/**
 *  添加一个大头针
 *
 *  @param location ...
 */
- (BMKPointAnnotation *)creatPointWithLocaiton:(CLLocation *)location title:(NSString *)title;
{
    BMKPointAnnotation *point = [[BMKPointAnnotation alloc] init];
    point.coordinate = location.coordinate;
    point.title = title;
    [self.mapView addAnnotation:point];
    
    return point;
}

/**
 *  清空数组以及地图上的轨迹
 */
- (void)clean
{

    //清空数组
    [self.locationArrayM removeAllObjects];
    
    //清屏，移除标注点
    if (self.startPoint) {
        [self.mapView removeAnnotation:self.startPoint];
        self.startPoint = nil;
    }
    if (self.endPoint) {
        [self.mapView removeAnnotation:self.endPoint];
        self.endPoint = nil;
    }
    if (self.polyLine) {
        [self.mapView removeOverlay:self.polyLine];
        self.polyLine = nil;
    }
}


#pragma mark - BMKMapViewDelegate

/**
 *  根据overlay生成对应的View
 *  @param mapView 地图View
 *  @param overlay 指定的overlay
 *  @return 生成的覆盖物View
 */
- (BMKOverlayView *)mapView:(BMKMapView *)mapView viewForOverlay:(id<BMKOverlay>)overlay
{
    if ([overlay isKindOfClass:[BMKPolyline class]]) {
        BMKPolylineView* polylineView = [[BMKPolylineView alloc] initWithOverlay:overlay];
        polylineView.fillColor = [[UIColor clearColor] colorWithAlphaComponent:0.7];
        polylineView.strokeColor = [[UIColor greenColor] colorWithAlphaComponent:0.7];
        polylineView.lineWidth = 10.0;
        return polylineView;
    }
    return nil;
}
#pragma mark - GPS图片信号强度判断
- (NSString *)GPSStrengthWithLocation:(CLLocation *)location{
    //默认图片 搜索中
    CLLocationAccuracy horizontalAccuracy = location.horizontalAccuracy;
    
    if(horizontalAccuracy<0){
        //无信号
        return @"icon_gps_0";
    }else if(horizontalAccuracy>=200){
        //信号微弱（一格）
        return @"icon_gps_1";
    }else if(horizontalAccuracy>=50&&horizontalAccuracy<200){
        //信号弱（两格）
        return @"icon_gps_2";
    }else if(horizontalAccuracy>=10&&horizontalAccuracy<50){
        //信号中（三格）
        return @"icon_gps_3";
    }else if(horizontalAccuracy>=0&&horizontalAccuracy<10){
        //信号强（四格）
        return @"gps-zhong";
    }else{
        return @"gps-zhong";
    }
}
- (BMKAnnotationView *)mapView:(BMKMapView *)mapView viewForAnnotation:(id <BMKAnnotation>)annotation {
    
    BMKPinAnnotationView *annotationView = [[BMKPinAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:@"myAnnotation"];
    if([[annotation title] isEqualToString:@"起点"]) {
        annotationView.pinColor = BMKPinAnnotationColorGreen;
    }else if ([[annotation title] isEqualToString:@"终点"]) {
        annotationView.pinColor = BMKPinAnnotationColorRed;
    }else {
        annotationView.pinColor = BMKPinAnnotationColorPurple;
    }
    UIView *viewForImage=[[UIView alloc]initWithFrame:CGRectMake(0, 0, KWidth(90.9), KHeight(66.6))];
    UIImageView *viewForimageview=[[UIImageView alloc]initWithFrame:viewForImage.frame];
    [viewForimageview setImage:[UIImage imageNamed:@"icon_GPS"]];
    [viewForImage addSubview:viewForimageview];
    
    UIImageView *imageview=[[UIImageView alloc]initWithFrame:CGRectMake( KWidth(56), KHeight(14), KWidth(21), KWidth(21))];
    [imageview setImage: [UIImage imageNamed:[self GPSStrengthWithLocation:self.userLocation.location]]];
    [viewForImage addSubview:imageview];
    
    UILabel *label=[[UILabel alloc]initWithFrame:CGRectMake( KWidth(16), 0, KWidth(41), KHeight(54))];
    label.text=@"GPS";
    label.textColor = [UIColor getColor:@"2C4667"];
    [label setFont:[UIFont systemFontOfSize:18.0f]];
    [viewForImage addSubview:label];
    annotationView.paopaoView = [[BMKActionPaopaoView alloc] initWithCustomView:viewForImage];
    annotationView.selected = YES;
    annotationView.image = [UIImage imageNamed:@"icon_nav"];
    return annotationView;

}
-(void)mapView:(BMKMapView *)mapView didDeselectAnnotationView:(BMKAnnotationView *)view
{
    
    [self.mapView selectAnnotation:_startPoint animated:YES];
}

#pragma mark lazy load
- (BMKMapView *)mapView
{
    if (!_mapView) {
        
        _mapView = [[BMKMapView alloc]initWithFrame:CGRectMake(0, KHeight(123), KScreenWidth, KScreenHeight - KHeight(123))];
        [_mapView setZoomLevel:17];
        _mapView.mapType = BMKMapTypeStandard;
        _mapView.rotateEnabled = YES;
        _mapView.showsUserLocation = YES;
        _mapView.delegate = self;
        _mapView.userTrackingMode = BMKUserTrackingModeFollow;
    }
    return _mapView;
}
#pragma mark - 路径绘制

-(void)drawWalkPolyline:(NSArray *)locations {
    //轨迹点的个数
    NSUInteger count = locations.count;
    //动态分配存储空间,BMKMapPoint是个结构体，表示地理坐标点，X表示横坐标，Y表示纵坐标
    //动态new一个tempPoints临时数组
    BMKMapPoint *tempPoints = (BMKMapPoint *)malloc(sizeof(BMKMapPoint)*count);
    
    [locations enumerateObjectsUsingBlock:^(CLLocation *location, NSUInteger idx, BOOL * _Nonnull stop) {
        BMKMapPoint locationPoint = BMKMapPointForCoordinate(location.coordinate);
        tempPoints[idx] = locationPoint;
    }];
    if(!_startPoint &&count > 0) {
        _startPoint = [self createPointWithLocation:[self.locations firstObject] title:@"起点"];
    }
    //移除原有的绘图，避免重画
    if(self.polyLine) {
        [self.mapView removeOverlay:self.polyLine];
    }
    //通过BMKMapPoint点绘制折线
    self.polyLine = [BMKPolyline polylineWithPoints:tempPoints count:count];
    //把折线添加到地图上显示
    if(self.polyLine) {
        [self.mapView addOverlay:self.polyLine];
    }
    //清空临时数组
    free(tempPoints);
}

//根据polyLine设置地图范围

- (void)mapViewFitPolyLine:(BMKPolyline *) polyLine {
    
    //一个矩形的四边
    /** ltx: top left x */
    CGFloat ltX, ltY, rbX, rbY;
    if (polyLine.pointCount < 1) {
        return;
    }
    BMKMapPoint pt = polyLine.points[0];
    ltX = pt.x, ltY = pt.y;
    rbX = pt.x, rbY = pt.y;
    
    for (int i = 1; i < polyLine.pointCount; i++) {
        BMKMapPoint pt = polyLine.points[i];
        if (pt.x < ltX) {
            ltX = pt.x;
        }
        if (pt.x > rbX) {
            rbX = pt.x;
        }
        if (pt.y > ltY) {
            ltY = pt.y;
        }
        if (pt.y < rbY) {
            rbY = pt.y;
        }
    }
    
    BMKMapRect mapRect;
    mapRect.origin = BMKMapPointMake(ltX, ltY);
    mapRect.size = BMKMapSizeMake(rbX - ltX, rbY - ltY);
    [self.mapView setVisibleMapRect:mapRect ];
    
    //self.mapView.zoomLevel = self.mapView.zoomLevel - 0.3;
    
    CGPoint point = [self.mapView convertCoordinate:self.locations.firstObject.coordinate toPointToView:self.mapView];
    if (16777215 == point.x) {
        [self.mapView zoomOut];
    }
    [self.mapView zoomOut];
}

//在地图上添加一个大头针
-(BMKPointAnnotation *)createPointWithLocation:(CLLocation *)location title:(NSString *)title {
    BMKPointAnnotation *point = [[BMKPointAnnotation alloc] init];
    point.coordinate = location.coordinate;
    point.title = title;
    [self.mapView addAnnotation:point];
    return point;
}
/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

@end
